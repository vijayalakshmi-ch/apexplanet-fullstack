<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task 2: Responsive Auth UI</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="custom.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
</head>
<body>

    <nav class="navbar navbar-expand-lg custom-navbar">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Apex UI</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item"><a class="nav-link active" aria-current="page" href="#" id="show-login">Login</a></li>
                    <li class="nav-item"><a class="nav-link" href="#" id="show-register">Register</a></li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-12 col-md-6 col-lg-4">

                <div class="card shadow-lg p-3 custom-card" id="login-card">
                    <h2 class="card-title text-center mb-4">Login</h2>
                    <form id="login-form">
                        <div class="mb-3">
                            <label for="loginEmail" class="form-label">Email</label>
                            <input type="email" class="form-control" id="loginEmail" name="email" required>
                        </div>
                        <div class="mb-3 position-relative">
                            <label for="loginPassword" class="form-label">Password</label>
                            <input type="password" class="form-control" id="loginPassword" name="password" required>
                            <span class="password-toggle" onclick="togglePassword('loginPassword', this)"><i class="fas fa-eye"></i></span>
                            <div class="invalid-feedback">Password is too short.</div>
                        </div>
                        <button type="submit" class="btn custom-btn w-100 mt-2">Sign In</button>
                    </form>
                </div>

                <div class="card shadow-lg p-3 custom-card d-none" id="register-card">
                    <h2 class="card-title text-center mb-4">Register</h2>
                    <form id="register-form">
                        <div class="mb-3">
                            <label for="regEmail" class="form-label">Email</label>
                            <input type="email" class="form-control" id="regEmail" name="email" required>
                            <div class="invalid-feedback" id="email-feedback"></div>
                        </div>
                        <div class="mb-3 position-relative">
                            <label for="regPassword" class="form-label">Password</label>
                            <input type="password" class="form-control" id="regPassword" name="password" required>
                            <span class="password-toggle" onclick="togglePassword('regPassword', this)"><i class="fas fa-eye"></i></span>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="mb-3 position-relative">
                            <label for="regConfirmPassword" class="form-label">Confirm Password</label>
                            <input type="password" class="form-control" id="regConfirmPassword" name="confirm_password" required>
                            <span class="password-toggle" onclick="togglePassword('regConfirmPassword', this)"><i class="fas fa-eye"></i></span>
                            <div class="invalid-feedback">Passwords do not match.</div>
                        </div>
                        <button type="submit" class="btn custom-btn w-100 mt-2">Create Account</button>
                    </form>
                </div>

            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="custom.js"></script>
</body>
</html>
/* custom.css: Custom Styling and Animations */

/* 1. Custom Color Palette & Google Fonts */
:root {
    --primary-color: #3b5998; /* A professional blue */
    --secondary-color: #f4f4f9;
    --text-color: #333;
    --font-family: 'Poppins', sans-serif;
}

body {
    background-color: var(--secondary-color);
    font-family: var(--font-family);
    padding-top: 60px; /* Space for fixed navbar */
    transition: background-color 0.5s ease; /* Smooth Transition */
}

/* Navbar Custom Styling */
.custom-navbar {
    background-color: var(--primary-color);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 1000;
}

.navbar-brand, .nav-link {
    color: white !important;
    font-weight: 600;
}

/* 2. Custom Button & Hover Effects */
.custom-btn {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    color: white;
    transition: background-color 0.3s ease-in-out, transform 0.2s ease;
}

.custom-btn:hover {
    background-color: #2d4373; /* Darker shade on hover */
    border-color: #2d4373;
    transform: translateY(-2px); /* Subtle hover effect */
    color: white;
}

/* Card Styling */
.custom-card {
    border: none;
    border-radius: 15px;
    /* Basic animation on load (optional but cool) */
    animation: fadeIn 1s ease-out; 
}

/* Password Show/Hide Toggle Styling */
.password-toggle {
    position: absolute;
    right: 15px;
    top: 68%; /* Adjust based on form control height */
    transform: translateY(-50%);
    cursor: pointer;
    color: #6c757d;
    transition: color 0.2s;
}

.password-toggle:hover {
    color: var(--primary-color);
}

/* CSS Keyframe for Animation */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Smooth Scrolling (Optional: often applied via JS or in a larger project) */
/* html { scroll-behavior: smooth; } */
// custom.js: JS Form Validation, Toggle, and AJAX Basics

document.addEventListener('DOMContentLoaded', () => {
    // DOM elements
    const loginCard = document.getElementById('login-card');
    const registerCard = document.getElementById('register-card');
    const showLoginBtn = document.getElementById('show-login');
    const showRegisterBtn = document.getElementById('show-register');
    const registerForm = document.getElementById('register-form');
    const regPassword = document.getElementById('regPassword');
    const regConfirmPassword = document.getElementById('regConfirmPassword');
    const regEmail = document.getElementById('regEmail');
    const emailFeedback = document.getElementById('email-feedback');

    // 1. Project Development: Toggle between Login and Registration pages
    showRegisterBtn.addEventListener('click', () => {
        loginCard.classList.add('d-none');
        registerCard.classList.remove('d-none');
        // Update active link styling
        showLoginBtn.classList.remove('active');
        showRegisterBtn.classList.add('active');
    });

    showLoginBtn.addEventListener('click', () => {
        registerCard.classList.add('d-none');
        loginCard.classList.remove('d-none');
        // Update active link styling
        showRegisterBtn.classList.remove('active');
        showLoginBtn.classList.add('active');
    });


    // 2. Form Handling with JS: Password Match Check
    regConfirmPassword.addEventListener('keyup', () => {
        if (regPassword.value !== regConfirmPassword.value) {
            regConfirmPassword.classList.add('is-invalid');
        } else {
            regConfirmPassword.classList.remove('is-invalid');
            regConfirmPassword.classList.add('is-valid');
        }
    });

    // 3. AJAX Basics: Dummy Check if username/email already exists on blur
    regEmail.addEventListener('blur', async () => {
        const email = regEmail.value.trim();
        if (email) {
            const isEmailTaken = await checkEmailExists(email);

            if (isEmailTaken) {
                regEmail.classList.add('is-invalid');
                emailFeedback.textContent = 'This email is already registered.';
            } else {
                regEmail.classList.remove('is-invalid');
                regEmail.classList.add('is-valid');
                emailFeedback.textContent = 'Email available!';
            }
        }
    });
    
    // AJAX Function (Dummy Implementation)
    async function checkEmailExists(email) {
        // In a real application, this would fetch data from a PHP script
        // Example: await fetch('check_email.php?email=' + email);

        console.log(`AJAX: Checking existence for email: ${email}`);

        // --- Dummy Logic ---
        // Simulating a network delay
        await new Promise(resolve => setTimeout(resolve, 500)); 
        
        // Simulating that 'test@taken.com' is already in the database
        if (email.toLowerCase() === 'test@taken.com') {
            return true; // Email taken
        }
        return false; // Email available
        // --- End Dummy Logic ---
    }


    // 4. Final Form Validation and Submission (example for registration)
    registerForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        // Check for basic required fields (Bootstrap validation handles this mostly)
        // Check password match one last time
        if (regPassword.value !== regConfirmPassword.value) {
            alert('Error: Passwords do not match!');
            return;
        }

        // Check for the simulated AJAX validation state
        if (regEmail.classList.contains('is-invalid')) {
            alert('Error: Please use an available email address.');
            return;
        }

        alert('Registration successful! (Form data would be sent to the server now)');
        // In Task 3, you'll replace this alert with actual PHP submission
    });

});

// Global function for Show/Hide Password Toggle
function togglePassword(fieldId, iconElement) {
    const field = document.getElementById(fieldId);
    if (field.type === "password") {
        field.type = "text";
        iconElement.innerHTML = '<i class="fas fa-eye-slash"></i>'; // Change icon to 'eye-slash'
    } else {
        field.type = "password";
        iconElement.innerHTML = '<i class="fas fa-eye"></i>'; // Change icon back to 'eye'
    }
}
