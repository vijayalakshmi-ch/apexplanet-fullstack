<?php
// config.php: Database Connection and Configuration

// 1. Database Configuration
define('DB_SERVER', 'localhost'); // Your MySQL server hostname
define('DB_USERNAME', 'root');    // Your MySQL username (e.g., 'root' for XAMPP)
define('DB_PASSWORD', '');        // Your MySQL password (empty for default XAMPP setup)
define('DB_NAME', 'usermgmt_db'); // The database created in Task 1/2 (or a new one for this task)

// 2. Attempt to connect to MySQL database
$conn = new mysqli(DB_SERVER, DB_USERNAME, DB_PASSWORD, DB_NAME);

// Check connection
if ($conn->connect_error) {
    die("ERROR: Could not connect to the database. " . $conn->connect_error);
}

// 3. Optional: Start Session (Crucial for Authentication System)
// Note: session_start() must be the very first thing in your script, before any HTML or output.
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}
?>
<?php
// register.php: User Registration with Hashed Passwords and Prepared Statements

// Include the connection file
require_once 'config.php';

$email = $password = $confirm_password = "";
$email_err = $password_err = "";

// Processing form data when form is submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // 1. Validate Email (Server-side validation)
    if (empty(trim($_POST["email"]))) {
        $email_err = "Please enter an email.";
    } elseif (!filter_var(trim($_POST["email"]), FILTER_VALIDATE_EMAIL)) {
        $email_err = "Invalid email format.";
    } else {
        // Prepare a SELECT statement to check if the email already exists
        $sql = "SELECT id FROM users WHERE email = ?"; // ? is a placeholder

        // SECURITY: Use Prepared Statements to prevent SQL Injection
        if ($stmt = $conn->prepare($sql)) {
            // Bind variables to the prepared statement as parameters
            $stmt->bind_param("s", $param_email);
            
            // Set parameters
            $param_email = trim($_POST["email"]);

            if ($stmt->execute()) {
                $stmt->store_result();
                
                if ($stmt->num_rows == 1) {
                    $email_err = "This email is already registered.";
                } else {
                    $email = trim($_POST["email"]);
                }
            } else {
                echo "Oops! Something went wrong. Please try again later.";
            }
            $stmt->close();
        }
    }

    // 2. Validate Password
    if (empty(trim($_POST["password"]))) {
        $password_err = "Please enter a password.";     
    } elseif (strlen(trim($_POST["password"])) < 6) {
        $password_err = "Password must have at least 6 characters.";
    } else {
        $password = trim($_POST["password"]);
    }
    
    // Check if passwords match
    if (trim($_POST["password"]) !== trim($_POST["confirm_password"])) {
        $password_err .= " Passwords do not match.";
    }


    // 3. Insert user into the database if no errors
    if (empty($email_err) && empty($password_err)) {
        
        // Use default role_id = 1 (e.g., User)
        $sql = "INSERT INTO users (email, password, role_id) VALUES (?, ?, 1)";
         
        if ($stmt = $conn->prepare($sql)) {
            $stmt->bind_param("ss", $param_email, $param_password);
            
            $param_email = $email;
            // SECURITY: Store passwords in encrypted format (hashing)
            $param_password = password_hash($password, PASSWORD_DEFAULT); // Recommended method
            
            if ($stmt->execute()) {
                // Registration successful, redirect to login page
                header("location: login.php");
                exit();
            } else {
                echo "Something went wrong. Please try again.";
            }
            $stmt->close();
        }
    }
    
    // Close connection
    $conn->close();
}
// You would display your registration HTML form here, showing $email_err and $password_err
// on the respective input fields.
?>
CREATE TABLE roles (
    id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);

INSERT INTO roles (id, name) VALUES (1, 'User'), (2, 'Admin');

-- Table for User Registration
CREATE TABLE users (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL, -- Needs to be long for hashed passwords
    role_id INT NOT NULL,
    profile_pic VARCHAR(255) DEFAULT 'default.jpg',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    -- Role-Based Login: Linking to the roles table
    FOREIGN KEY (role_id) REFERENCES roles(id) 
);
<?php
// read_users.php: Fetch and display user data

require_once 'config.php';
include 'header.html'; // Assume you have a header file for the UI

echo "<h2>User Management System</h2>";

// Prepare a SELECT statement
$sql = "SELECT id, email, created_at FROM users ORDER BY created_at DESC";

if ($result = $conn->query($sql)) {
    if ($result->num_rows > 0) {
        // Display fetched data in HTML table format
        echo "<table class='table table-bordered'>";
            echo "<thead>";
                echo "<tr>";
                    echo "<th>ID</th>";
                    echo "<th>Email</th>";
                    echo "<th>Registered On</th>";
                    echo "<th>Action</th>"; // For Update/Delete links
                echo "</tr>";
            echo "</thead>";
            echo "<tbody>";
            
            // Fetch records row by row
            while ($row = $result->fetch_assoc()) {
                echo "<tr>";
                    echo "<td>" . $row['id'] . "</td>";
                    echo "<td>" . htmlspecialchars($row['email']) . "</td>";
                    echo "<td>" . $row['created_at'] . "</td>";
                    echo "<td>";
                        // Links to other CRUD pages (to be built in Task 3)
                        echo "<a href='edit.php?id=" . $row['id'] . "' class='btn btn-warning btn-sm me-2'>Edit</a>";
                        // Delete with confirmation popup (using simple JS for the popup)
                        echo "<a href='delete.php?id=" . $row['id'] . "' class='btn btn-danger btn-sm' onclick='return confirm(\"Are you sure you want to delete this user?\");'>Delete</a>";
                    echo "</td>";
                echo "</tr>";
            }
            echo "</tbody>";
        echo "</table>";
        
        $result->free(); // Free result set
    } else {
        echo "<p class='lead'><em>No users were found.</em></p>";
    }
} else {
    echo "ERROR: Could not execute $sql. " . $conn->error;
}

$conn->close();
include 'footer.html'; // Assume you have a footer file
?>
